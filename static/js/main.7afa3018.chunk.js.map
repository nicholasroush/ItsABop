{"version":3,"sources":["Util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","setState","event","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","handleClick","onNameChange","onSave","playlistName","playlistTracks","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","process","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7afa3018.chunk.js","sourcesContent":["const clientId = process.env.REACT_APP_CLIENT_ID;\r\nconst redirectUri = 'https://nicholasroush.github.io/itsabop/';\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if(accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if(accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1])\r\n\r\n            // clears the paramters, allowing new access token when it expires\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl; \r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(\r\n            `https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n            { headers: { Authorization: `Bearer ${accessToken}` }}\r\n        ).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if(!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri \r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlayList(name, trackUris) {\r\n        if(!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \r\n                {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris })\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n        this.setState({ term: '' });\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input value={this.state.term} placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\r\n                <button className=\"SearchButton\" onClick={ this.search }>SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Track.css'\r\n\r\nexport class Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        if(this.props.isRemoval) {\r\n            return <button className='Track-action' onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className='Track-action' onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './TrackList.css' \r\nimport { Track } from '../Track/Track' \r\n\r\nexport class TrackList extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track} \r\n                             key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './SearchResults.css';\r\nimport { TrackList } from '../TrackList/TrackList';\r\n\r\nexport class SearchResults extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Playlist.css'\r\nimport { TrackList } from '../TrackList/TrackList'\r\n\r\nexport class Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    handleClick(event) {\r\n        this.props.onSave(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input value={this.props.playlistName} placeholder='\"New Playlist\"' onChange={this.handleNameChange} />\r\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.handleClick}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport { Playlist } from '../Playlist/Playlist';\nimport Spotify from '../../Util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: '',\n      playlistTracks: [],\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this); \n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: '',\n        playlistTracks: [],\n        searchResults: [],\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n  render() {\n\n    return(\n      <div>\n        <h1>Its<span className=\"highlight\">A </span>Bop</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist \n            playlistName={this.state.playlistName} \n            playlistTracks={this.state.playlistTracks} \n            onRemove={this.removeTrack} \n            onNameChange={this.updatePlaylistName} \n            onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}